@startuml

class Main {
  + main()
  + find_best_model()
}

class Configurations {
  + __init__(config_dict: dict)
}

class PreprocessPipeline {
  + __init__(config: Configurations)
  + preprocess_data(data_frame: pd.DataFrame) : pd.DataFrame
  + preprocess_data_multiprocessing(data_frame: pd.DataFrame) : pd.DataFrame
  + split_dataframe_into_chunks(data_frame: pd.DataFrame, chunk_size: int) : List[pd.DataFrame]
  + prepare_data_with_label(data_frame: pd.DataFrame, column: str) : pd.DataFrame
  + split_training_data(data_frame: pd.DataFrame, test_split_percentage: float, shuffle_state: int, shuffle: bool) : Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]
}

class TrainingPipeline {
  + __init__(config: Configurations)
  + train_model(sklearn_steps: List[Union[object]]) : object
  + evaluate_model(model: object, x_test: np.ndarray, y_test: np.ndarray) : Evaluation
}

class Evaluation {
  + __init__(accuracy: float, recall: float, precision: float, f1: float)
}

class Model {
  + __init__(config: Configurations)
  + train(x_train: np.ndarray, y_train: np.ndarray) : object
}

Main --> Configurations
Main --> PreprocessPipeline
Main --> TrainingPipeline
TrainingPipeline --> Model
TrainingPipeline --> Evaluation

@enduml
